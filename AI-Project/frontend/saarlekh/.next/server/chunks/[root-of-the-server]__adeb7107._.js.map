{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///home/dave/Documents/SaarLekh/AI-Project/frontend/saarlekh/models/user.js"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst userSchema = new mongoose.Schema({\n    email: {\n        type: String,\n        required: true,\n        unique: true,\n      },\n      password: {\n        type: String,\n        required: true,\n      },\n});\n\nconst User = mongoose.models.User || mongoose.model(\"User\", userSchema);\n\nexport default User;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACnC,OAAO;QACH,MAAM;QACN,UAAU;QACV,QAAQ;IACV;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;AACN;AAEA,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAE7C","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///home/dave/Documents/SaarLekh/AI-Project/frontend/saarlekh/lib/mongodb.js"],"sourcesContent":["import mongoose from 'mongoose';\n\nlet isConnected = false;\n\nconst connectToDatabase = async () => {\n    if (isConnected) {\n        console.log('Using existing MongoDB connection');\n        return;\n    }\n\n    try {\n        await mongoose.connect(process.env.MONGODB_URI, {\n            useNewUrlParser: true,\n            useUnifiedTopology: true,\n            bufferCommands: false,\n        });\n\n        isConnected = true;\n        console.log('Connected to MongoDB');\n    } catch (error) {\n        console.error('Error connecting to MongoDB:', error);\n        throw new Error('Failed to connect to the database');\n    }\n};\n\nexport default connectToDatabase;\n"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI,cAAc;AAElB,MAAM,oBAAoB;IACtB,IAAI,aAAa;QACb,QAAQ,GAAG,CAAC;QACZ;IACJ;IAEA,IAAI;QACA,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;YAC5C,iBAAiB;YACjB,oBAAoB;YACpB,gBAAgB;QACpB;QAEA,cAAc;QACd,QAAQ,GAAG,CAAC;IAChB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,MAAM,IAAI,MAAM;IACpB;AACJ;uCAEe","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file:///home/dave/Documents/SaarLekh/AI-Project/frontend/saarlekh/app/api/auth/signup/route.js"],"sourcesContent":["import bcrypt from 'bcryptjs';\nimport { NextResponse } from 'next/server';\nimport User from '@/models/user';\nimport connectToDatabase from '@/lib/mongodb';\n\nexport async function POST(request) {\n    const { name, email, password } = await request.json();\n\n    const isValidEmail = (email) => {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n\n    if (!email || !password) {\n        return NextResponse.json({ error: 'Email and password are required' }, { status: 400 });\n    }\n\n    if (!isValidEmail(email)) {\n        return NextResponse.json({ error: 'Invalid email format' }, { status: 400 });\n    }\n\n    if (password.length < 8) {\n        return NextResponse.json({ error: 'Password must be at least 8 characters long' }, { status: 400 });\n    }\n\n    try {\n        await connectToDatabase();\n\n        const existingUser = await User.findOne({ email });\n        if (existingUser) {\n            return NextResponse.json({ error: 'User already exists' }, { status: 400 });\n        }\n\n        const hashedPassword = await bcrypt.hash(password, 10);\n        const newUser = new User({\n            name,\n            email,\n            password: hashedPassword,\n        });\n\n        await newUser.save();\n        return NextResponse.json({ message: 'User created successfully' }, { status: 201 });\n    } catch (error) {\n        return NextResponse.json({ error: error.message }, { status: 500 });\n    }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,OAAO;IAC9B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;IAEpD,MAAM,eAAe,CAAC;QAClB,MAAM,aAAa;QACnB,OAAO,WAAW,IAAI,CAAC;IAC3B;IAEA,IAAI,CAAC,SAAS,CAAC,UAAU;QACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAkC,GAAG;YAAE,QAAQ;QAAI;IACzF;IAEA,IAAI,CAAC,aAAa,QAAQ;QACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC9E;IAEA,IAAI,SAAS,MAAM,GAAG,GAAG;QACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA8C,GAAG;YAAE,QAAQ;QAAI;IACrG;IAEA,IAAI;QACA,MAAM,CAAA,GAAA,gHAAA,CAAA,UAAiB,AAAD;QAEtB,MAAM,eAAe,MAAM,gHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE;QAAM;QAChD,IAAI,cAAc;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC7E;QAEA,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QACnD,MAAM,UAAU,IAAI,gHAAA,CAAA,UAAI,CAAC;YACrB;YACA;YACA,UAAU;QACd;QAEA,MAAM,QAAQ,IAAI;QAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACrF,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACrE;AACJ","debugId":null}}]
}