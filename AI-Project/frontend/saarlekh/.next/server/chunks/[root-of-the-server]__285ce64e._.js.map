{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///home/dave/Documents/SaarLekh/AI-Project/frontend/saarlekh/models/user.js"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst userSchema = new mongoose.Schema({\n    email: {\n        type: String,\n        required: true,\n        unique: true,\n      },\n      password: {\n        type: String,\n        required: true,\n      },\n});\n\nconst User = mongoose.models.User || mongoose.model(\"User\", userSchema);\n\nexport default User;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACnC,OAAO;QACH,MAAM;QACN,UAAU;QACV,QAAQ;IACV;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;AACN;AAEA,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAE7C","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///home/dave/Documents/SaarLekh/AI-Project/frontend/saarlekh/lib/mongodb.js"],"sourcesContent":["import mongoose from 'mongoose';\n\nlet isConnected = false;\n\nconst connectToDatabase = async () => {\n    if (isConnected) {\n        console.log('Using existing MongoDB connection');\n        return;\n    }\n\n    try {\n        await mongoose.connect(process.env.MONGODB_URI, {\n            useNewUrlParser: true,\n            useUnifiedTopology: true,\n            bufferCommands: false,\n        });\n\n        isConnected = true;\n        console.log('Connected to MongoDB');\n    } catch (error) {\n        console.error('Error connecting to MongoDB:', error);\n        throw new Error('Failed to connect to the database');\n    }\n};\n\nexport default connectToDatabase;\n"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI,cAAc;AAElB,MAAM,oBAAoB;IACtB,IAAI,aAAa;QACb,QAAQ,GAAG,CAAC;QACZ;IACJ;IAEA,IAAI;QACA,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;YAC5C,iBAAiB;YACjB,oBAAoB;YACpB,gBAAgB;QACpB;QAEA,cAAc;QACd,QAAQ,GAAG,CAAC;IAChB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,MAAM,IAAI,MAAM;IACpB;AACJ;uCAEe","debugId":null}},
    {"offset": {"line": 275, "column": 0}, "map": {"version":3,"sources":["file:///home/dave/Documents/SaarLekh/AI-Project/frontend/saarlekh/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport User from \"@/models/user\";\nimport connectToDatabase from \"@/lib/mongodb\";\nimport bcrypt from \"bcrypt\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport Email from \"next-auth/providers/email\";\n\nconst handler = NextAuth({\n    session: {\n        strategy: \"jwt\",\n    },\n    providers: [\n        CredentialsProvider({\n            name: \"Credentials\",\n            credentials: {\n                email: { label: \"Email\", type: \"text\" },\n                password: {  label: \"Password\", type: \"password\" },\n            },\n            async authorize(credentials) {\n                try {\n                    await connectToDatabase();\n                    const user = await User.findOne({\n                        email: credentials?.email,\n                    });\n                    \n                    if (!user) {\n                        throw new Error(\"No user found with this email\");\n                    }\n\n                    const isValidPassword = await bcrypt.compare(\n                        credentials.password,\n                        user.password\n                    );\n                    if (!isValidPassword) {\n                        throw new Error(\"Invalid password\");\n                    }\n                    \n                    return {\n                        id: user._id,\n                        name: user.name,\n                        email: user.email,\n                        image: user.image,\n                    };\n                }\n                catch (error) {\n                    console.error(\"Error in authorize:\", error);\n                    throw new Error(\"Error authorizing user\");\n                }\n            },\n        }),\n    ],\n    callbacks: {\n        async jwt({ token, user }) {\n            if (user) {\n                token.id = user._id;\n                token.email = user.email;\n            }\n            return token;\n        },\n        async session({ session, token }) {\n            if (token) {\n                session.user = {\n                    id: token.id,\n                    email: token.email,\n                    name: token.name,\n                    image: token.picture,\n                };\n            }\n            return session;\n        },\n    },\n    pages: {\n        signIn: \"/login\",\n        newUser: \"/dashboard\",\n    }, \n    secret: process.env.NEXTAUTH_SECRET,\n});\n\nexport { handler as GET, handler as POST };"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE;IACrB,SAAS;QACL,UAAU;IACd;IACA,WAAW;QACP,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAChB,MAAM;YACN,aAAa;gBACT,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAG,OAAO;oBAAY,MAAM;gBAAW;YACrD;YACA,MAAM,WAAU,WAAW;gBACvB,IAAI;oBACA,MAAM,CAAA,GAAA,gHAAA,CAAA,UAAiB,AAAD;oBACtB,MAAM,OAAO,MAAM,gHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;wBAC5B,OAAO,aAAa;oBACxB;oBAEA,IAAI,CAAC,MAAM;wBACP,MAAM,IAAI,MAAM;oBACpB;oBAEA,MAAM,kBAAkB,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CACxC,YAAY,QAAQ,EACpB,KAAK,QAAQ;oBAEjB,IAAI,CAAC,iBAAiB;wBAClB,MAAM,IAAI,MAAM;oBACpB;oBAEA,OAAO;wBACH,IAAI,KAAK,GAAG;wBACZ,MAAM,KAAK,IAAI;wBACf,OAAO,KAAK,KAAK;wBACjB,OAAO,KAAK,KAAK;oBACrB;gBACJ,EACA,OAAO,OAAO;oBACV,QAAQ,KAAK,CAAC,uBAAuB;oBACrC,MAAM,IAAI,MAAM;gBACpB;YACJ;QACJ;KACH;IACD,WAAW;QACP,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACrB,IAAI,MAAM;gBACN,MAAM,EAAE,GAAG,KAAK,GAAG;gBACnB,MAAM,KAAK,GAAG,KAAK,KAAK;YAC5B;YACA,OAAO;QACX;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC5B,IAAI,OAAO;gBACP,QAAQ,IAAI,GAAG;oBACX,IAAI,MAAM,EAAE;oBACZ,OAAO,MAAM,KAAK;oBAClB,MAAM,MAAM,IAAI;oBAChB,OAAO,MAAM,OAAO;gBACxB;YACJ;YACA,OAAO;QACX;IACJ;IACA,OAAO;QACH,QAAQ;QACR,SAAS;IACb;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACvC","debugId":null}}]
}